#version 450


layout(location = 0) in vec2 uv;
layout(location = 0) out vec4 ao;

layout(set = 0, binding = 0) uniform Global{
    mat4 projMat;
    mat4 viewMat;
    vec3 cameraPosition;
};
layout(set = 0, binding = 1) uniform sampler2D[2] normal_pos;

// generated using /annexes/ssao_noise.py
const vec4 samples[64] = vec4[](
    vec4(0.43659592299973776, 0.13019531546131918, 0.13857671256180942, 0),
    vec4(0.10579119434182961, 0.16304072414344584, -0.2845091543650115, 0),
    vec4(0.0030667032117714537, 0.005061202134820934, 0.0020441155194543662, 0),
    vec4(-2.2132208670281142e-05, 2.517842671174703e-05, 7.873001685869676e-06, 0),
    vec4(-0.39695648662238286, 0.29884882239796007, 0.5316747631096316, 0),
    vec4(0.003934672027205111, 0.07387333034080845, -0.013088700054786042, 0),
    vec4(-0.24506074082632837, 0.7771384921794101, 0.23062220533581776, 0),
    vec4(-0.14701056197342863, 0.18839824763838053, 0.14132803723379045, 0),
    vec4(0.10540961434657202, 0.7052404228849113, -0.01812830021596714, 0),
    vec4(-0.016025484679674226, 0.5675789808781673, 0.3418740511505823, 0),
    vec4(0.013437983563242158, 0.005100790778579265, -0.0023933876776490526, 0),
    vec4(0.1114419653831263, 0.29724465508916265, -0.19318210706149336, 0),
    vec4(-0.22006197008854322, 0.7131670445202992, 0.6060488408785414, 0),
    vec4(0.010079433370772235, 0.00871280573603574, 0.011421554249594536, 0),
    vec4(6.757236190314536e-05, 0.33125393590242147, 0.010983604307933957, 0),
    vec4(-0.1695547563502845, 0.3904573861776793, -0.6248363867376902, 0),
    vec4(0.27477621033229765, 0.18417109253166786, 0.20008734765543867, 0),
    vec4(-0.37926484553977186, 0.042203619332931396, -0.668263748528575, 0),
    vec4(0.270307039496524, 0.26621396706359896, -0.018636822790864104, 0),
    vec4(-0.009827732573458653, 0.5825815402928736, 0.004548049903780478, 0),
    vec4(0.3142422502793962, 0.29656295331730115, -0.10704998045967112, 0),
    vec4(0.2619297981640248, 0.10121888942276085, 0.09552932344730693, 0),
    vec4(-0.0008225907675275192, 0.009259050760916283, 0.0018890436177411742, 0),
    vec4(0.001041753676392233, 0.09043812962771498, 0.002289365459421005, 0),
    vec4(0.01589314380772412, 0.3282450465705176, 0.013885349120504084, 0),
    vec4(-0.18449373982722347, 0.6772829474014427, 0.44267010314988686, 0),
    vec4(0.0462129386777902, 0.21202392105248435, 0.14790368051119931, 0),
    vec4(-0.00982713967188637, 0.7786525569339957, -0.003261285460588062, 0),
    vec4(-0.15383475236892188, 0.22920684170448924, -0.21154417871342573, 0),
    vec4(-0.0028958971180017895, 0.019140784570804748, -0.013884395533582273, 0),
    vec4(0.008625772263815607, 0.020175444851933677, 0.009829275488133213, 0),
    vec4(-0.503301204840081, 0.09204218501404379, 0.6399507920730435, 0),
    vec4(1.75724266383726e-05, 0.02559686256081423, -6.6924989392511406e-06, 0),
    vec4(0.001567932239209489, 0.007629793600133215, -0.0013677287371009431, 0),
    vec4(0.7739693970651184, 0.18777739490874443, -0.10102752717443532, 0),
    vec4(0.8133106821367521, 0.1968549285841788, -0.23879646656178083, 0),
    vec4(-0.1575764896517549, 0.38738051964174847, -0.03806462475122092, 0),
    vec4(-0.005537184047057909, 0.09432448339349923, -0.02035011568465862, 0),
    vec4(-0.02362172206067369, 0.09455396972512616, 0.00014066915939633414, 0),
    vec4(-0.07624197468071475, 0.0003791413152044447, 0.12191848371316752, 0),
    vec4(-0.1938978519043696, 0.0961139679726303, -0.09578898532302911, 0),
    vec4(-0.013000088047161885, 0.07251871623656038, -0.022735887494954757, 0),
    vec4(-0.16631221977656793, 0.05591002406447656, -0.4911893024799964, 0),
    vec4(0.005451237655818396, 0.0023967648922537475, -0.004928034787385208, 0),
    vec4(0.34183647201338196, 0.4466477613612304, 0.35079589424285335, 0),
    vec4(-0.007443120069209282, 0.18674390871897648, 0.0008947451265271807, 0),
    vec4(-0.006597656868425063, 0.11292565319577164, -0.02217249094168297, 0),
    vec4(0.0031984351530640735, 0.037186467251750885, -0.08265713622238227, 0),
    vec4(-0.06245183122825637, 0.21051849524085073, 0.11446669971503717, 0),
    vec4(-0.12445796516775441, 0.3823648942992536, -0.09934026968515418, 0),
    vec4(0.04036727918109531, 0.05610494047396928, 0.01845849042236241, 0),
    vec4(0.22735225199920867, 0.8026246881087892, -0.1422154490111018, 0),
    vec4(0.027031834652717204, 0.02003963128279173, 0.03645153047335553, 0),
    vec4(-0.05691285728399841, 0.040689925263108474, 0.055147517159295174, 0),
    vec4(-0.00625283337627148, 0.01696281746343715, -0.0784914105339514, 0),
    vec4(0.10459324516654121, 0.4041534045391262, -0.1834011124850995, 0),
    vec4(0.04635031377678128, 0.1840712881541332, 0.008576487702148746, 0),
    vec4(0.5455184062349022, 0.5732122506065856, -0.18809878769605448, 0),
    vec4(0.0154682416854404, 0.011810909732714234, -0.007931183372256026, 0),
    vec4(0.3519907829696908, 0.597595140501622, 0.3673829548213074, 0),
    vec4(0.1450987117336348, 0.6701387335401335, -0.05428307285514893, 0),
    vec4(-0.007929422942308249, 0.049113953368303605, 0.009593068820813552, 0),
    vec4(0.05278423632180819, 0.15100403419726857, -0.007528890996944539, 0),
    vec4(0.0011388637724468245, 0.0028396969985252873, -6.15578161892983e-05, 0)
);


const float radius = 0.2;
const float bias = 0.01;

void main() {
    vec3 normal = texture(normal_pos[0], uv).xyz;
    vec3 position = texture(normal_pos[1], uv).xyz;
    vec3 posview = (viewMat * vec4(position, 1.0)).xyz;
    vec3 tangent = normalize(vec3(0,0,1) - normal * dot(vec3(0, 0, 1), normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent,  bitangent,  normal);

    float occlusion = 0.0;
    for(int i = 0; i < 64; ++i) {
        vec3 samplePos = TBN * samples[i].xyz; // from tangent to view-space
        samplePos = position + samplePos * radius; 
        vec4 v = viewMat * vec4(samplePos, 1.0);
        vec4 offset = projMat * v;
        offset.xy /= offset.w;
        offset.xy = offset.xy * 0.5 + 0.5;

        float sampleDepth = (viewMat * vec4(texture(normal_pos[1], offset.xy).xyz, 1.0)).z;
        float rangeCheck = smoothstep(0.0, 1.0, radius / abs(posview.z - sampleDepth));
        occlusion += (sampleDepth >=v.z + bias ? 1.0 : 0.0)*rangeCheck;
    }
    ao.x = 1.0  - occlusion / 64;
} 
